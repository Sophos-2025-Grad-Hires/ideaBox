name: Post-Deployment Apex Scripts

on:
  workflow_run:
    workflows: ["SF Package and Deploy to QA & PROD"]   # must match workflow name exactly
    types:
      - completed

jobs:
  postDeploy:
    if: github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    environment: PRODapex

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: patrykacc/sf-cli-setup@74431631871daefe43ea718c09a13977a407270f

      - name: Detect changed pre-deploy Apex scripts
        id: detect
        run: |
          # Determine base branch depending on target
          if [[ "${{ github.base_ref }}" == "develop" ]]; then
            BASE_BRANCH="develop"
          else
            BASE_BRANCH="main"
          fi

          echo "Using base branch: $BASE_BRANCH"

          # Detect modified or added scripts
          files=$(git fetch origin $BASE_BRANCH && git diff --name-only --diff-filter=AM origin/$BASE_BRANCH...HEAD | grep "scripts/post/apex/.*\.apex" || true)

          if [ -z "$files" ]; then
            echo "No pre-deploy Apex scripts changed. Skipping."
            echo "run_scripts=false" >> $GITHUB_OUTPUT
          else
            echo "Detected scripts:"
            echo "$files"
            echo "run_scripts=true" >> $GITHUB_OUTPUT
            echo "scripts=$files" >> $GITHUB_OUTPUT
          fi

      - name: Authenticate with Salesforce
        env:
          SF_CONSUMER_KEY: ${{ secrets.SF_CONSUMER_KEY }}
          SF_JWT_KEY: ${{ secrets.SF_JWT_KEY }}
          SF_USERNAME: ${{ secrets.SF_USERNAME }}
        run: |
          echo "$SF_JWT_KEY" > server.key
          sf org login jwt \
            --client-id "$SF_CONSUMER_KEY" \
            --jwt-key-file server.key \
            --username "$SF_USERNAME" \
            --instance-url https://test.salesforce.com \
            --alias PRODapex

      - name: Validate Apex scripts
        if: steps.detect.outputs.run_scripts == 'true'
        run: |
          for script in ${{ steps.detect.outputs.scripts }}; do
            echo "Validating $script"
            if [ ! -s "$script" ]; then
              echo "Error: $script is empty"
              exit 1
            fi
            if [[ "$script" != *.apex ]]; then
              echo "Error: $script does not have .apex extension"
              exit 1
            fi
            echo "Validation passed âœ…"
          done
          
      - name: Execute pre-deploy Apex scripts
        if: steps.detect.outputs.run_scripts == 'true'
        run: |
          for script in ${{ steps.detect.outputs.scripts }}; do
            echo "Running script: $script on PRODapex"
            sf apex run --file "$script" --target-org PRODapex
            if [ $? -ne 0 ]; then
              echo "Script failed: $script"
              exit 1
            fi
          done