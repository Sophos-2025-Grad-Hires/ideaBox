name: SF Package and Deploy to QA & PROD

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  PRODbuild:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: patrykacc/sf-cli-setup@74431631871daefe43ea718c09a13977a407270f # v1.1.0

      - name: Create deploy package
        run: sfdx force:source:convert -d deploy

      - name: Upload deploy package
        uses: actions/upload-artifact@v4
        with:
          name: deploy-package
          path: deploy/
          
  PRODdeploy:
    runs-on: ubuntu-latest
    needs: PRODbuild
    strategy:
      matrix:
        env: [QA, PROD]
    environment: ${{ matrix.env }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - uses: patrykacc/sf-cli-setup@74431631871daefe43ea718c09a13977a407270f # v1.1.0

      - name: Download deploy package
        uses: actions/download-artifact@v4
        with:
          name: deploy-package

      - name: Authenticate with Salesforce
        env:
          SF_CONSUMER_KEY: ${{ secrets.SF_CONSUMER_KEY }}
          SF_JWT_KEY: ${{ secrets.SF_JWT_KEY }}
          SF_USERNAME: ${{ secrets.SF_USERNAME }}
        run: |
          echo "$SF_JWT_KEY" > server.key
          sf org login jwt \
            --client-id "$SF_CONSUMER_KEY" \
            --jwt-key-file server.key \
            --username "$SF_USERNAME" \
            --instance-url https://test.salesforce.com \
            --set-default

      - name: Detect changed Apex classes
        id: detect
        run: |
            # Make sure main is available for comparison
            git fetch origin main 

            # Find Apex classes changed or added in this PR (compared to main)
            files=$(git diff --name-only --diff-filter=AM origin/main...HEAD | grep "force-app/main/default/classes/.*\.cls" || true)

            if [ -z "$files" ]; then
            echo "No Apex classes changed. Skipping tests."
            echo "run_tests=false" >> $GITHUB_OUTPUT
            else
            tests=""
            for f in $files; do
                class=$(basename "$f" .cls)
                testClass="${class}Test"

                if [ -f "force-app/main/default/classes/${testClass}.cls" ]; then
                tests="$tests $testClass"
                fi
            done

            if [ -z "$tests" ]; then
                echo "No matching test classes found. Defaulting to RunLocalTests."
                echo "run_tests=all" >> $GITHUB_OUTPUT
            else
                echo "Detected test classes: $tests"
                echo "run_tests=true" >> $GITHUB_OUTPUT
                echo "test_classes=$tests" >> $GITHUB_OUTPUT
            fi
            fi

      - name: Deploy to ${{ matrix.env }} (with tests)
        id: deploy
        if: steps.detect.outputs.run_tests == 'true'
        run: |
          sf project deploy start \
            --source-dir force-app \
            --wait 30 \
            --test-level RunSpecifiedTests \
            --tests ${{ steps.detect.outputs.test_classes }} \
            --json > deploy-results.json
        continue-on-error: true   # step won’t block next step

      - name: Deploy to ${{ matrix.env }} (no tests)
        id: deploy_no_tests
        if: steps.detect.outputs.run_tests != 'true'
        run: |
          sf project deploy start \
            --source-dir force-app \
            --wait 30 \
            --test-level NoTestRun \
            --json > deploy-results.json
        continue-on-error: true

      - name: Parse deploy results
        id: results
        run: |
          total=$(jq '.result.details.runTestResult.numTestsRun' deploy-results.json)
          failed=$(jq '.result.details.runTestResult.numFailures' deploy-results.json)
          passed=$((total - failed))
          time=$(jq '.result.details.runTestResult.totalTime' deploy-results.json)

          # Extract failed test names
          failed_tests=$(jq -r '.result.details.runTestResult.failures[]?.methodName' deploy-results.json | paste -sd ', ' -)

          {
            echo "summary<<EOF"
            echo "✅ Passed: $passed"
            echo "❌ Failed: $failed"
            echo "📊 Total: $total"
            echo "⏱️ Time: ${time}s"
            echo ""
            if [ -n "$failed_tests" ]; then
              echo "**Failed Tests:**"
              for t in $(jq -r '.result.details.runTestResult.failures[]?.methodName' deploy-results.json); do
                echo "- $t"
              done
            fi
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Comment results on PR
        uses: peter-evans/create-or-update-comment@be17e0c03de886b7aff3fb3224d28bfb6fc5d114
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## Salesforce Deployment Results
            ${{ steps.results.outputs.summary }}
          token: ${{ secrets.GH_PAT }}

      - name: Fail job if deploy step failed
        if: steps.deploy.outcome == 'failure' || steps.deploy_no_tests.outcome == 'failure'
        run: exit 1